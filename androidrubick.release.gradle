// Definitions of release tasks.
apply plugin: 'maven'
//使用signing plugin做数字签名
apply plugin: 'signing'

def isReleaseBuild() {
    if (hasProperty('BUILD_RELEASE')) {
        return propertyTrue('BUILD_RELEASE')
    }
    return propertyValueTrue(System.getProperty('BUILD_RELEASE'))
}

def getRepositoryUrl() {
    if (isReleaseBuild()) {
        return hasProperty('REPO_URL') ? REPO_URL
                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    }
    return LOCAL_REPO_URL
}

def getSnapshotRepositoryUrl() {
    if (isReleaseBuild()) {
        return hasProperty('SNAPSHOT_REPO_URL') ? SNAPSHOT_REPO_URL
                : "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    return LOCAL_REPO_URL
}

def getRepositoryUsername() {
    return hasProperty('REPO_USER') ? property('REPO_USER') : "foo"
}

def getRepositoryPassword() {
    return hasProperty('REPO_PWD') ? property('REPO_PWD') : "bar"
}

def configPom(pom) {
    pom.groupId = MAVEN_PROJECT_GROUP
    pom.artifactId = MAVEN_POM_ARTIFACT_ID
    pom.version = MAVEN_PROJECT_VERSION

    pom.project {
        name MAVEN_POM_NAME
        artifactId MAVEN_POM_ARTIFACT_ID
        packaging MAVEN_POM_PACKAGING
        description "${MAVEN_POM_DESCRIPTION} [built at ${new Date().format('yyyyMMddHHmmssSSS')}]"
        url POM_URL

        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION
        }

        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }

        developers {
            developer {
                id POM_DEVELOPER_ID
                name POM_DEVELOPER_NAME
                email POM_DEVELOPER_EMAIL
            }
        }
    }
}

// see https://mbcdev.com/2015/02/18/building-javadocs-for-android-library-projects-with-gradle/
android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
        ARLog("get java compile source & classpaths of release variant")
        def androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        project.ext.AR_EXTRAS.JAVADOC_SOURCES = variant.javaCompile.source
        project.ext.AR_EXTRAS.JAVADOC_CLASSPATHS = files(variant.javaCompile.classpath.files) + files(androidJar)
        ARLog("AR_EXTRAS.JAVADOC_CLASSPATHS : $AR_EXTRAS.JAVADOC_CLASSPATHS.files")
    }
}

afterEvaluate { project ->
    version = MAVEN_PROJECT_VERSION
    group = MAVEN_PROJECT_GROUP

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        configuration = configurations.archives

        repositories.mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            if (isReleaseBuild()) {
                ARLog('build release')
                repository(url: getRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            } else {
                ARLog('build local')
                repository(url: getRepositoryUrl())
                snapshotRepository(url: getSnapshotRepositoryUrl())
            }

            ARLog("version<${MAVEN_PROJECT_VERSION}>")

            configPom(pom)
        }
    }

    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        ARLog('process android library')

        task install(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives

                configPom(pom)
            }
        }

        task androidJavadocs(type: Javadoc) {
            source = AR_EXTRAS.JAVADOC_SOURCES ? AR_EXTRAS.JAVADOC_SOURCES : android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            if (AR_EXTRAS.JAVADOC_CLASSPATHS) {
                classpath += AR_EXTRAS.JAVADOC_CLASSPATHS
            }

            options {
                // set locale, use default now
                // locale = 'en_US'
                // set encoding / charset
                encoding AR_EXTRAS.PROJECT_ENCODING
                charSet AR_EXTRAS.PROJECT_ENCODING
                links "http://docs.oracle.com/javase/7/docs/api/"
                links Locale.default.language == 'zh' ? "http://www.android-doc.com/reference/" : "http://d.android.com/reference/"
            }
//            options.encoding = AR_PROJECT_ENCODING
//            options.charSet = AR_PROJECT_ENCODING
//            options.links("http://docs.oracle.com/javase/7/docs/api/")
//            options.links("http://d.android.com/reference/")
            // see https://mbcdev.com/2015/02/18/building-javadocs-for-android-library-projects-with-gradle/
            // options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference");

            // We're not excluding these generated files currently
            // exclude '**/BuildConfig.java'
            // exclude '**/R.java'
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }
    } else {
        ARLog('no com.android.application or com.android.library')

        install {
            repositories.mavenInstaller {
                configPom(pom)
            }
        }

        task sourcesJar(type: Jar, dependsOn:classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    // java doc add option if is java 8 or over
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    // artifacts add source jars
    artifacts {
        if (project.getPlugins().hasPlugin('com.android.application') ||
                project.getPlugins().hasPlugin('com.android.library')) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else {
            archives sourcesJar
            archives javadocJar
        }
    }
}

